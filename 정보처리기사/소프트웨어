1. 소프트 웨어
  
  1) 상용 소프트 웨어
    - 상업적 or 판매 목적
    - 소스코드를 배포하지 않음
    - 분류 : 범용(응용 SW), 특화(특정 산업 SW)
  
  2) 응용 소프트 웨어 (어플리케이션, 응용 솔류션)
    - 특정 업무 처리 목적

  3) 시스템 소프트 웨어 (응용체제 : window 등)
    - 컴퓨터 시스템 사용을 돕는 SW
    - 정의(5대 기능) : 입력, 처리, 출력, 제어, 피드백
    - 시스템의 성능 평가기준
      * 처리 능력(Throw put) : 단위 시간 내 처리량
      * 반환시간(Turn Around Time) : 작업의뢰부터 처리시간
      * 사용 가능도(Availability) : 필요할 때 즉시 사용 가능한 정도
      * 신뢰도(Realability) : 주어진 문제를 정확하게 해결하는 정도
    - 플랫폼 : 특정 시스템을 바탕으로 제공하는 운영체제
      * 플랫폼의 성능측정기준
        > 가용성(Availability) : 필요한 때 즉시 사용 가능한 정도(시스템 성능평가 기준의 사용 가능도와 동일)
        > 응답시간(Response Time) : 명령에 반응하는 시간(시스템 성능평가 기준의 반환시관과 다름)
        > 정확성(Accuracy) : 처리결과가 기댓값과 비교해서 정확한지
        > 사용률(Utilization) : 시스템 자원을 사용하는 정도

  4) 소프트웨어공학(효율!!)
    - 목적
      * 개발에 필요한 비용과 기간예측
      * 하드웨어에 대한 소프트 웨어의 상대적 비율 절감
      * 급속하게 발전하는 하드소프트 웨어 기술 반영
    - 기본 원칙
      * 현대 프로그래밍 기술 지속 반영
      * SW 품질 지속 검증
      * SW 개발 단계별 산출물 명확한 기록 유지

  5) 소프트 웨어 개발 프레임 워크
    - 모듈 : 기능별로 분할
      * 개발자가 기본 틀 제공, 모듈을 활용하여 기능 구체화
    - 라이브러리 : 모듈모으는 곳
      * 라이브러리에 존재하는 각 모듈이 반드시 독립적이진 않음(종속 o)
    - 디자인 패턴 : 추상적인 가이드라인 제시
    - 소프트 웨어 개발 프레임 워크 : 프레임 워크가 기본 틀 제공, 개발자가 기능을 구체화 (모듈과 반대 = 제어의 역흐름)
    - 컴포넌트 : 모듈은 기능별이면 컴포넌트는 소프트 웨어 블럭
      * 협약에 의한 설계 시 포함되어야 하는 조건
        > 선행조건 : 실행 전
        > 결과조건 : 실행 후
        > 불변조건 : 실행 중

















