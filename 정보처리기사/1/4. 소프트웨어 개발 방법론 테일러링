4-1. 소프트웨어 개발 방법론 테일러링 : 기존 SW 개발 모델을 최적화

  1) 방법론 테일러링의 필요성 판단기준
    - 내부적 요건 : 목표 환경, 요구사항, 프로젝트 규모, 보유 기술
    - 외부적 요건 : 법적 제약사항, 표준 품질 기준 등
    
  2) 방법론 테일러링 프로세스 : 일정 및 자원현황 반영 > 개발 단계별 절차 수립 > 메뉴얼 작성

  3) SW 개발 프로젝트 개요
    - SW 개발 프로젝트 관리 요소(5가지) : 일정, 비용, 투입 자원, 위험, 품질
    - SW 개발 프로젝트 계획 및 예측
      * 프로젝트 비용을 결정하는 요소
        ㅇ 프로젝트 요소 : 규모, 신뢰도, 복잡도
        ㅇ 자원 요소 : 인적자원, 하드웨어, 라이센스
        ㅇ 생산성 요소 : 개발 기간, 개발자 능력

4-2. 프로젝트 일정 관리

  1) 프로젝트 일정관리 원칙
    - 프로젝트 참여 인원은 프로젝트 시작 전에 결정(Brooks의 법칙 : 프로젝트 중 인원 투입시 일정을 지연시킴)

  2) 프로젝트 일정 계획 방법론
    - 소요 기간의 예측 가능성에 때라 PERT, CPM으로 구분
    - PERT(예측 불확실) 계산법 : 예측치 = (낙관치+(4*기대치)+비관치)/6
    - CPM(예측 확실) : 임계 경로(가장 긴 소요시간으로 산정)로 개발 기간 결정

4-3. 프로젝트 비용산정 모델
  
  1) SW 사업비 종류 (6가지) : 계획 수립, 개발, 유지 보수, 재개발, DB 구축, 환경 구축

  2) SW 비용 산정
    - SW 비용 산정 정의 : 상향식, 하향식 기법
    - SW 비용 결정 요소
      * 프로젝트 : 제품 복잡도, 시스템 크기, 요구 신뢰도
      * 자원 : 인적자원, 하드웨어 자원, 소프트웨어 자원
      * 생산성 : 개발자 역량, 개발 기간

  3) 하향식 비용 산정 기법(비과학적) : 전체 비용을 산정 후 각 기능별로 세분화
    - 전문가 측정 기법 : 경험이 있는 둘 이상의 전문가들이 신속하게 비용 산정(개인적, 주관적 판단)
    - 델파이 측정 기법 : 조정자가 여러 전문가의 의견을 종합 비용 산정(전문자 측정 기법 단점 보완)

  4) 상향식 비용 산정 기법 : 세부적인 작업 단위별로 비용 산정 뒤 전체 비용 산정
    - (LOC(Line Of Code), 단계별 노력 기법(Effort Per Task), 수학적 산정 기법 존재
    - 측정 용이, 이해 쉬움
    - LOC기법 : 소스 코드 라인 수의 비관치(가장 적은 라인 수), 낙관치(가장 적은 라인 수), 기대치(평균 라인 수)를 통해 예측치 계산 후 비용 산정 기법
      * 예측치 = (낙관치+(4*기대치)+비관치/6
    - LOC 기반 비용 산정 공식
      * 노력 = 개발 기간*투입인원 = LOC/인당 월평균 생산 코드 라인
      * 개발 비용 = 노력 * 월평균 인건비
      * 개발 기간 = LOC/인당 월평균 생산 코드 라인/투입 인원
      * 개발 기간 = LOC/(인당 월평균 생산 코드 라인*투입 인원)
      * 생산성 = LOC/노력
    - 단계별 노력 기법 (LOC 기법 보완) : 노력에 가중치를 별도 반영하여 측정
    - 수학적 산정 기법
      * COCOMO : LOC 기반 비용 산정 기법
        ㅇ Basic, Intermediate, Detailed 모델로 구분
        ㅇ 규모에 따라 나뉨
          > Organic(조직, 5만 라인 이하)
          > Semi-Deached(반분리형, 30만 라인 이하)
          > Embedded(내장형, 30만 라인 이상)
      * Putnam : 노력 분포도 기반
      * 기능 점수 기법(Function Point) : 기능 증대 요인에 따라 가중치 부여 비용 산정
        ㅇ 기능 증대 요인 : 입력, 출력, 사용자 질의, 데이터 파일, 인터페이스

4-4. 투입 인력 자원 구성

  1) 책임 프로그래머 팀 유형 : 소규모, 단기에 적합, 만족도가 낮고 이직률이 높음
  2) 민주주의식 팀 유형 : 대규모, 장기에 적합, 만족도가 높고 이직률이 낮음

4-5. 소프트웨어 품질 관리

  1) 소프트웨어 개발 표준
    - ISO/IEC 12207 : 국제표준화기구(ISO)에서 제정한 표준 소프트웨어 수명 주기 프로세스(기본, 지원, 조직으로 분류)
    - ISO/IEC 12119 : 패키지 소프트웨어의 제품 품질 요구사항 및 테스트를 위한 국제 표준
    - ISO/IEC 29119 : 소프트웨어 테스트를 위한 국제 표준
    - ISO/IEC 25010 : 소프트웨어 품질 특성 및 평가에 관한 표준
      * 외부 품질 특성(6가지) : 기능성, 신뢰성, 사용성, 효율성, 유지보수성, 이식성 
  
  2) CMM(Capability Maturity Model) : 업무 능력 평가 기준을 세우기 위한 평가 능력 성숙도 모델, 제품 자체의 품질과 연관성 없고 소규모에 비효율적인 단점
    - 단계별 프로세스 성숙도
      * 초기(Initail)
      * 반복(Repeatable)
      * 정의(Defined)
      * 관리(Managed)
      * 최적화(Optimizing)
    - 프로세스 관리 품질 평가 기준(오를수록 생산성과 품질이 높음)
      * 레벨1(혼돈적 관리)
      * 레벨2(경험적 관리)
      * 레벨3(정성적 관리)
      * 레벨4(정량적 관리)
      * 레벨5(최적화 관리)

  3) CMMI(Capability Maturity Model Integration) : CMM을 발전시킨 것, 역량 성숙도 평가
    - 기반 모델(3가지) : SW-CMM(S/W 개발 및 유지보수), SE-CMM(시스템 엔지니어링), IPD-CMM(협동/통합 프로젝트 개선)
    - 단계별 프로세스 성숙도
      * 초기(Initail)
      * 반복(Repeatable)
      * 정의(Defined)
      * 정량적 관리(Quantitatively Managed)
      * 최적화(Optimizing)
  
  4) SPICE(ISO/IEC 15504) : 프로세스를 평가, CMM의 단점개선을 위해 제정
    - 목적(3가지) : 프로세스 개선 스스로 평가, 요구 조건 만족 여부 스스로 평가, 계약을 위한 수탁 기관의 프로세스 평가
    - 단계별 프로세스 성숙도
      * 레벨0(불완전)
      * 레벨1(수행)
      * 레벨2(관리)
      * 레벨3(확립)
      * 레벨4(예측 가능)
      * 레벨5(최적)

  5) CASE 도구 : 개발 프로세스 자동화를 지원하는 소프트웨어 도구, 반복적인 작업량을 줄여줌
    - 특징 : 명령어, 문법 숙지 필요, CASE 도구 간 호환성 없음
    - 계층적 분류 : 상위(요구 분석, 설계 단계), 하위(코드 작성, 테스트, 유지보수), 통합(전체 과정)
    - 도구 종류
      * SADT(SoftTech 회사 도구) : 블록 다이어그램을 채택한 자동화 도구
      * SREM(TRW 회사 도구) : RSL(요소, 속성, 관계, 구조들을 기술하는 요구사항 기술언어), REVS(RSL 기술 요구사항 분석 명세서 출력)
      * TAGS : 개발 주기의 전 과정에 이용가능한 통합 자동화 도구
      * PSL/PSA(미시간대학 개발) : PSL(요구사항 기술언어), PSA(PSL 기술 요구사항 분석 명세서 출력)

4-6 프로젝트 형상 관리(변경 사항 관리)
  1) 형상 관리 프로세스
    - 형상 식별 : 형상 관리 대상을 식별하여 수정 및 추적이 가능하도록 기준선을 정함
    - 형상 통제 : 변경 요구를 검토 승인
    - 형상 상태 보고 : 결과 기록, 관리
    - 형상 감사 : 기준선의 무결성 승인을 위해 공식적 검증
