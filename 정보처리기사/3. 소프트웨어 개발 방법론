3. 소프트웨어 개발 방법론
  1) 절차 : 분석 > 설계 > 구현 > 시험
  
  2) 종류
  
    - 구조적 방법론 : 모듈 중심의 설계
      * 순차, 선택, 반복의 논리구조 구성
    
    - 정보공학 방법론 : 개념적인 수준의 데이터와 프로세스 설계
      * 데이터 모델링 도구 : 개체-관계 다이어그램(ERD)
      * 프로세스 모델링 도구 : 자료 흐름도, 프로세스 의존도, 프로세스 계충도
    
    - 객체지향 방법론 : 실체(Entity)를 독립된 형태의 객체(Object)로 표현, 객체 간 상호작용하도록 프로그램 개발
      * 🔴기본원칙
        > 캡슐화 : 데이터와 해당 데이터의 처리 기능을 하나로 묶음
        > 정보은닉 : 다른 객체에서 자신의 정보를 숨김
        > 추상화 : 객체의 공통적인 속성을 상위 객체로 도출
        > 상속성 : 상위 객체의 속성을 하위 객체가 물려받아 사용
        > 다형성 : 하나의 수행 방법으로 여러 형태의 기능 수행
      * 컴포넌트 기반 방법론 : 컴포넌트들을 조립하여 개발
        > 장점 : 생산성, 이식성, 호환성, 신속성, 유연성, 표준화
        > 단점 : 선행 투자 비용이 높음
        > 단계별 산출물 : 분석 단계, 설계 단계, 구현 단계, 시험 단계
        
    - 제품 계열 방법론 : 특정 제품에 적용하는 기능 개발
      * 구분 
        > 영역공학 : 영역 분석, 영역 설계, 핵심 자산을 구현하는 영역
        > 응용공학 : 제품 요구 분석, 제품 설계, 제품을 구현하는 영역
    
    - 보안 개발 방법론 : 취약점 최소화, 지침 사례기반 개발
      * 종류
        > MS-SDL : 마이크로소프트사 자체 모델
        > Seven Touchpoints : 7가지 모범 사례 통합
          ㅇ 코드 검토(code review)
          ㅇ 아킽텍처 위험 분석(architectural risk analysis)
          ㅇ 침투 테스트(penetration testing)
          ㅇ 위험 기반 보안 테스트(risk-base security testing)
          ㅇ 악용사례 (abuse cases)
          ㅇ 보안 요구(security requirement)
          ㅇ 보안 운영(security operation)
        > CLASP(Comprehensive, Lightweight Application Security Process) : 이미 운영 중인 시스템에 적용하기 좋음
          ㅇ 5가지 관점에 따라 보안 절차(개념, 역할 기반, 활동 평가, 활동 구현, 취약성)
        > CWE(Common Weakness Enumeration) : 보안 취약점 원인 7가지
          ㅇ 입력 데이터 검증 및 표현
          ㅇ 보안 기능
          ㅇ 시간 및 상태
          ㅇ 에러 처리
          ㅇ 코드 오류
          ㅇ 캡슐화
          ㅇ API 오용
